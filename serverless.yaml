service: serverless-next

useDotenv: true

####################################### Provider #######################################
provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  #################################
  ##        Environment          ##
  #################################
  environment:
    USER_POOL: !Ref UserPool
    AWS_BUCKET: !Ref Storage
    USER_POOL_CLIENT: !Ref UserClient
    DYNAMODB_TABLE_NAME: !Ref MyDynamoDbTable
    # DYNAMODB_DAX_ENDPOINT: !GetAtt MyDaxCluster.ClusterDiscoveryEndpoint
    APP_ENV: ${sls:stage}
    AWS_SQS_URL: ${construct:jobs.queueUrl}
    AMAZON_AWS_DEFAULT_REGION: ${self:provider.region}
    AWS_STATIC_BUCKET: next-static-site-assets # TODO [AssetsBucket] use !Ref AssetsBucket instead of fixed bucket name

  #################################
  ##        Auth Middleware      ##
  #################################
  # httpApi:
  #   authorizers:
  #     userAuthorization:
  #       identitySource: $request.header.Authorization
  #       issuerUrl: { "Fn::Join": ["", ["https://cognito-idp.us-east-1.amazonaws.com/", !Ref UserPool]] }
  #       audience: !Ref UserClient

  #################################
  ##        API Gateway          ##
  #################################
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - "*/*"

  #################################
  ##        IAM Role             ##
  #################################
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            # Cognito
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            # DynamoDb
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            #S3
            - s3:*
          Resource: "*"

  #################################
  ##            VPC              ##
  #################################
  vpc:
    securityGroupIds:
      - Fn::GetAtt: [DatabaseVpcSecurityGroup, GroupId]
    subnetIds:
      - Ref: PrivateSubnet

####################################### Resource #######################################
resources:
  Resources:
    #################################
    ##            VPC              ##
    #################################
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        InstanceTenancy: default

    #################################
    ##       Private Subnet        ##
    #################################
    PrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ${self:provider.region}
        CidrBlock: 10.0.8.0/24
        VpcId:
          Ref: VPC

    #################################
    ##     S3 Function Storage     ##
    #################################
    Storage:
      Type: AWS::S3::Bucket

    #################################
    ##     S3 Assets Storage       ##
    #################################
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties: # TODO [AssetsBucket]: Remove to use auto generated bucket name
        BucketName: next-static-site-assets # TODO [AssetsBucket]: Remove to use auto generated bucket name
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"

    #################################
    ##    S3 Assets Storage Policy ##
    #################################
    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AssetsBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Sub "${AssetsBucket.Arn}/*"

    #################################
    ##    Cognito User Pool        ##
    #################################
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-pool-${sls:stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    #################################
    ##    Cognito User Client      ##
    #################################
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-client-${sls:stage}
        GenerateSecret: false
        UserPoolId: !Ref UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    #################################
    ##        DynamoDB DAX Role    ##
    #################################
    # MyDaxRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: my-dax-role
    #     AssumeRolePolicyDocument:
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service: dax.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: dax-policy
    #         PolicyDocument:
    #           Statement:
    #             - Effect: Allow
    #               Action: dax:*
    #               Resource: "*"
    #     Description: String
    #     ManagedPolicyArns:
    #       - String
    #     MaxSessionDuration: Integer
    #     Path: String
    #     PermissionsBoundary: String
    #     Tags:
    #       - Tag

    #################################
    ##        DynamoDB DAX Table   ##
    #################################
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: MyDynamoDbTable
        ProvisionedThroughput:
          ReadCapacityUnits: 0
          WriteCapacityUnits: 0
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        # ContributorInsightsSpecification: ContributorInsightsSpecification
        # DeletionProtectionEnabled: Boolean
        # GlobalSecondaryIndexes:
        #   - GlobalSecondaryIndex
        # ImportSourceSpecification: ImportSourceSpecification
        # KinesisStreamSpecification: KinesisStreamSpecification
        # LocalSecondaryIndexes:
        #   - LocalSecondaryIndex
        # PointInTimeRecoverySpecification: PointInTimeRecoverySpecification
        # SSESpecification: SSESpecification
        # StreamSpecification: StreamSpecification
        # TableClass: String
        # Tags:
        #   - Tag

    #################################
    ##        DynamoDB DAX Cluster ##
    #################################
    # MyDaxCluster:
    #   Type: AWS::DAX::Cluster
    #   Properties:
    #     ClusterName: MyDaxCluster
    #     IAMRoleARN: !GetAtt MyDaxRole.Arn
    #     NodeType: t2.small
    #     ReplicationFactor: 1
    #     AvailabilityZones:
    #       - String
    #     ClusterEndpointEncryptionType: String
    #     Description: String
    #     NotificationTopicARN: String
    #     ParameterGroupName: String
    #     PreferredMaintenanceWindow: String
    #     SecurityGroupIds:
    #       - String
    #     SSESpecification: SSESpecification
    #     SubnetGroupName: String
    #     Tags: Json

    #################################
    ##        DB Subnet Group      ##
    #################################
    DBSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties:
        DBSubnetGroupDescription: "DB Subnet Group"
        SubnetIds:
          - Ref: PrivateSubnet

    #################################
    ##     DB VPC Security Group   ##
    #################################
    DatabaseVpcSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: DBSecurityGroup
        GroupDescription: "Allow Local Access"
        SecurityGroupIngress:
          - CidrIp: 10.0.0.0/16
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
        VpcId:
          Ref: VPC

    #################################
    ##        RDS Aurora Cluster   ##
    #################################
    RdsDBCluster:
      Type: "AWS::RDS::DBCluster"
      Properties:
        Engine: aurora-mysql
        DBClusterIdentifier: my-aurora-cluster
        EngineVersion: 8.0.mysql_aurora.3.03.1
        MasterUsername: AN_AuroraDB
        MasterUserPassword: "AnLab2023"
        ServerlessV2ScalingConfiguration:
          MinCapacity: 0.5
          MaxCapacity: 1
        DBSubnetGroupName:
          Ref: DBSubnetGroup
        VpcSecurityGroupIds:
          - Ref: DatabaseVpcSecurityGroup

    #################################
    ##        RDS Aurora Instance  ##
    #################################
    RdsDBInstance:
      Type: "AWS::RDS::DBInstance"
      Properties:
        Engine: aurora-mysql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref RdsDBCluster
        PubliclyAccessible: true

####################################### Functions #######################################
functions:
  #################################
  ##        Next App Function    ##
  #################################
  api:
    handler: server.handler
    events:
      # Using Amazon Aws Api Gateway v2 (HTTP API)
      # - httpApi:
      #     method: ANY
      #     path: /api/privateEndpoint
      #     authorizer:
      #       name: userAuthorization
      - httpApi: "*"
      # Using Amazon Aws Api Gateway v1 (REST API - with stage name in url)
      # - http: ANY /
      # - http: ANY /{proxy+}

####################################### Plugin #######################################
plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-lift
  - serverless-s3-sync

####################################### Package #######################################
package:
  individually: true
  patterns:
    - ".next"
    - "node_modules"
    - "public"
    - "_next"
    - "next.config.js"
    - "next-i18next.config.js"
    - "package.json"

####################################### Custom #######################################
custom:
  #################################
  ##        Upload Assets To S3  ##
  #################################
  s3Sync:
    - bucketName: next-static-site-assets # TODO [AssetsBucket] use !Ref AssetsBucket instead of fixed bucket name
      localDir: .next/static
      bucketPrefix: _next/static/

  #################################
  ##        Build Option         ##
  #################################
  esbuild:
    bundle: true
    minify: true
    exclude: "*"
    external:
      - "next"

  #################################
  ##        Import .env Value    ##
  #################################
  dotenv:
    include:
      - AMAZON_AWS_ACCESS_KEY_ID
      - AMAZON_AWS_ACCESS_KEY_SECRET
    required:
      env:
        - AMAZON_AWS_ACCESS_KEY_ID
        - AMAZON_AWS_ACCESS_KEY_SECRET

####################################### Construct #######################################
constructs:
  #################################
  ##        Job Handler          ##
  #################################
  jobs:
    type: queue
    worker:
      handler: queueWorker.handler
    # fifo: false
    ### The maxRetries option configures how many times each message will be retried in case of failure.
    ### maxRetries default: 3
    # maxRetries: 5
    ### Lambda will receive 5 messages at a time
    ### Batch size between 1 and 10 for FIFO queues and 10000 for standard queues.
    ### For batch size over 10, maxBatchingWindow must be set.
    ### batchSize default: 1
    # batchSize: 5
    ### SQS will wait $$ seconds (so that it can batch any messages together) before delivering to lambda
    ### maxBatchingWindow default: 0 second
    # maxBatchingWindow: 5
