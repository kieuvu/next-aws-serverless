service: an-serverless-next-3

useDotenv: true

#------------------------------------------ 1.Provider ------------------------------------------#
provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  #-------------------------------#
  #         1.1.Environment       #
  #-------------------------------#
  environment:
    APP_ENV: ${sls:stage}
    AWS_BUCKET: !Ref PublicStorageBucket
    AWS_SQS_URL: ${construct:jobs.queueUrl}
    USER_POOL: !Ref UserPool
    USER_POOL_CLIENT: !Ref UserClient
    AMAZON_AWS_DEFAULT_REGION: ${self:provider.region}
    AWS_STATIC_BUCKET: !Ref AssetsBucket
    DYNAMODB_TABLE_NAME: !Ref MyDynamoDbTable
    AMAZON_AWS_ACCESS_KEY_ID: ${self:custom.AwsApiKey}
    AMAZON_AWS_ACCESS_KEY_SECRET: ${self:custom.AwsSecretKey}
    DB_URL: ${self:custom.DBUrl}
    DB_NAME: ${self:custom.DBName}
    DB_USERNAME: ${self:custom.DBUserName}
    DB_PASSWORD: ${self:custom.DBPassword}

  #-------------------------------#
  #      1.2.Auth Middleware      #
  #-------------------------------#
  httpApi:
    authorizers:
      userAuthorization:
        identitySource: $request.header.Authorization
        issuerUrl:
          {
            "Fn::Join":
              [
                "",
                ["https://cognito-idp.us-east-1.amazonaws.com/", !Ref UserPool],
              ],
          }
        audience: !Ref UserClient

  #-------------------------------#
  #        1.3.API Gateway        #
  #-------------------------------#
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - "*/*"

#------------------------------------------ 2.Resource ------------------------------------------#
resources:
  Resources:
    #-------------------------------#
    #    2.1.S3 Function Storage    #
    #-------------------------------#
    Storage:
      Type: AWS::S3::Bucket

    #-------------------------------#
    #      2.2.S3 Assets Storage    #
    #-------------------------------#
    PublicStorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
                - DELETE
                - PUT
                - POST
              AllowedOrigins:
                - "*"
    PublicStorageBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PublicStorageBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Sub "${PublicStorageBucket.Arn}/*"
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AssetsBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Sub "${AssetsBucket.Arn}/*"

    #-------------------------------#
    #     2.3.Cognito User Pool     #
    #-------------------------------#
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-pool-${sls:stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    #-------------------------------#
    #     2.4.Cognito User Client   #
    #-------------------------------#
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-client-${sls:stage}
        GenerateSecret: false
        UserPoolId: !Ref UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    #-------------------------------#
    #    2.5.DynamoDB Table         #
    #-------------------------------#
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: MyDynamoDbTable
        ProvisionedThroughput:
          ReadCapacityUnits: 0
          WriteCapacityUnits: 0
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    #-------------------------------#
    #    2.6.RDS Instance           #
    #-------------------------------#
    DBInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: MyRDSInstance
        Engine: mysql
        DBInstanceClass: db.t2.micro
        AllocatedStorage: "5"
        MasterUsername: ${self:custom.DBUserName}
        MasterUserPassword: ${self:custom.DBPassword}
        MultiAZ: false
        DBName: ${self:custom.DBName}
        BackupRetentionPeriod: 0
        EngineVersion: "5.7"
        DBSubnetGroupName: !Ref DBSubnetGroup
        VPCSecurityGroups:
          - !Ref VPCSecurityGroup

    #-------------------------------#
    #            2.8.VPC            #
    #-------------------------------#
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true

    #-------------------------------#
    #        2.9.Private Subnet     #
    #-------------------------------#
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Sub "${self:provider.region}a"
        CidrBlock: 10.0.8.0/24
        VpcId: !Ref VPC
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Sub "${self:provider.region}b"
        CidrBlock: 10.0.32.0/24
        VpcId: !Ref VPC

    #-------------------------------#
    #    2.17.DB Subnet Group       #
    #-------------------------------#
    DBSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties:
        DBSubnetGroupDescription: "DB Subnet Group"
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

    #-------------------------------#
    #  2.18.DB VPC Security Group   #
    #-------------------------------#
    VPCSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: DBSecurityGroup
        GroupDescription: "Allow Local Access"
        SecurityGroupIngress:
          - CidrIp: 10.0.0.0/16
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
        VpcId: !Ref VPC
  Outputs:
    AssetsBucketNameOutputKey:
      Value: !Ref AssetsBucket

#------------------------------------------ 3.Functions -----------------------------------------#
functions:
  #-------------------------------#
  #     3.1.Next App Function     #
  #-------------------------------#
  api:
    handler: server.handler
    vpc:
      securityGroupIds:
        - Fn::GetAtt: [VPCSecurityGroup, GroupId]
      subnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    events:
      # Using Amazon Aws Api Gateway v2 (HTTP API)
      # - httpApi:
      #     method: GET
      #     path: /api/privateRoute
      #     authorizer:
      #       name: userAuthorization
      - httpApi: "*"
      # Using Amazon Aws Api Gateway v1 (REST API - with stage name in url)
      # - http: ANY /
      # - http: ANY /{proxy+}

#------------------------------------------ 4.Plugin --------------------------------------------#
plugins:
  - serverless-esbuild
  - serverless-lift
  - serverless-s3-sync

#------------------------------------------ 5.Package -------------------------------------------#
package:
  individually: true
  patterns:
    - ".next"
    - "node_modules"
    - "public"
    - "_next"
    - "next.config.js"
    - "next-i18next.config.js"
    - "package.json"

#------------------------------------------ 6.Custom --------------------------------------------#
custom:
  #-------------------------------#
  #     6.1.Database Info         #
  #-------------------------------#
  DBName: ${file(./serverless.${opt:stage, 'dev'}.config.json):DB_Name}
  DBUserName: ${file(./serverless.${opt:stage, 'dev'}.config.json):DB_UserName}
  DBPassword: ${file(./serverless.${opt:stage, 'dev'}.config.json):DB_Password}
  DBUrl: !GetAtt DBInstance.Endpoint.Address

  #-------------------------------#
  #      6.2.Credentials Info     #
  #-------------------------------#
  AwsApiKey: ${file(./serverless.${opt:stage, 'dev'}.config.json):AMAZON_AWS_ACCESS_KEY_ID}
  AwsSecretKey: ${file(./serverless.${opt:stage, 'dev'}.config.json):AMAZON_AWS_ACCESS_KEY_SECRET}

  #-------------------------------#
  #      6.3.Sync Assets Config   #
  #-------------------------------#
  # [Doc] https://github.com/k1LoW/serverless-s3-sync
  s3Sync:
    - bucketNameKey: AssetsBucketNameOutputKey
      localDir: .next/static
      bucketPrefix: _next/static/

  #-------------------------------#
  #      6.4.Build Config         #
  #-------------------------------#
  esbuild:
    bundle: true
    minify: true
    exclude: "*"
    external:
      - "next"

#------------------------------------------ 5.Construct -----------------------------------------#
constructs:
  #-------------------------------#
  #        5.1.Job Handler        #
  #-------------------------------#
  # [Doc] https://github.com/getlift/lift/blob/master/docs/queue.md
  jobs:
    type: queue
    worker:
      handler: queueWorker.handler
    # fifo: false
    ### The maxRetries option configures how many times each message will be retried in case of failure.
    ### maxRetries default: 3
    # maxRetries: 5
    ### Lambda will receive 5 messages at a time
    ### Batch size between 1 and 10 for FIFO queues and 10000 for standard queues.
    ### For batch size over 10, maxBatchingWindow must be set.
    ### batchSize default: 1
    # batchSize: 5
    ### SQS will wait $$ seconds (so that it can batch any messages together) before delivering to lambda
    ### maxBatchingWindow default: 0 second
    # maxBatchingWindow: 5
