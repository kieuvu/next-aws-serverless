service: serverless-next

useDotenv: true

#------------------------------------------ 1.Provider ------------------------------------------#
provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1

  #-------------------------------#
  #         1.1.Environment       #
  #-------------------------------#
  environment:
    APP_ENV: ${sls:stage}
    AWS_BUCKET: !Ref Storage
    AWS_SQS_URL: ${construct:jobs.queueUrl}
    USER_POOL: !Ref UserPool
    USER_POOL_CLIENT: !Ref UserClient
    AMAZON_AWS_DEFAULT_REGION: ${self:provider.region}
    AWS_STATIC_BUCKET: next-static-site-assets
    DYNAMODB_TABLE_NAME: !Ref MyDynamoDbTable
    AMAZON_AWS_ACCESS_KEY_ID: ${self:custom.AwsApiKey}
    AMAZON_AWS_ACCESS_KEY_SECRET: ${self:custom.AwsSecretKey}
    DB_URL: ${self:custom.DBUrl}
    DB_NAME: ${self:custom.DBName}
    DB_USERNAME: ${self:custom.DBUserName}
    DB_PASSWORD: ${self:custom.DBPassword}

  #-------------------------------#
  #      1.2.Auth Middleware      #
  #-------------------------------#
  # httpApi:
  #   authorizers:
  #     userAuthorization:
  #       identitySource: $request.header.Authorization
  #       issuerUrl: { "Fn::Join": ["", ["https://cognito-idp.us-east-1.amazonaws.com/", !Ref UserPool]] }
  #       audience: !Ref UserClient

  #-------------------------------#
  #        1.3.API Gateway        #
  #-------------------------------#
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - "*/*"

  #-------------------------------#
  #         1.4.IAM Role          #
  #-------------------------------#
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            # Cognito
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            # DynamoDB
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"

#------------------------------------------ 2.Resource ------------------------------------------#
resources:
  Resources:
    #-------------------------------#
    #    2.1.S3 Function Storage    #
    #-------------------------------#
    Storage:
      Type: AWS::S3::Bucket

    #-------------------------------#
    #      2.2.S3 Assets Storage    #
    #-------------------------------#
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: next-static-site-assets

    #-------------------------------#
    #     2.3.Cognito User Pool     #
    #-------------------------------#
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-pool-${sls:stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    #-------------------------------#
    #     2.4.Cognito User Client   #
    #-------------------------------#
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-client-${sls:stage}
        GenerateSecret: false
        UserPoolId: !Ref UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    #-------------------------------#
    #    2.5.DynamoDB Table         #
    #-------------------------------#
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: MyDynamoDbTable
        ProvisionedThroughput:
          ReadCapacityUnits: 0
          WriteCapacityUnits: 0
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    #-------------------------------#
    #    2.6.RDS Aurora Cluster     #
    #-------------------------------#
    RdsDBInstance:
      Type: "AWS::RDS::DBInstance"
      Properties:
        Engine: aurora-mysql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref RdsDBCluster
        PubliclyAccessible: true

    #-------------------------------#
    #    2.7.RDS Aurora Instance    #
    #-------------------------------#
    RdsDBCluster:
      Type: "AWS::RDS::DBCluster"
      Properties:
        Engine: aurora-mysql
        DatabaseName: ${self:custom.DBName}
        DBClusterIdentifier: my-aurora-cluster
        EngineVersion: 8.0.mysql_aurora.3.03.1
        MasterUsername: ${self:custom.DBUserName}
        MasterUserPassword: ${self:custom.DBPassword}
        ServerlessV2ScalingConfiguration:
          MinCapacity: 0.5
          MaxCapacity: 1

#------------------------------------------ 3.Functions -----------------------------------------#
functions:
  #-------------------------------#
  #     3.1.Next App Function     #
  #-------------------------------#
  api:
    handler: server.handler
    events:
      # Using Amazon Aws Api Gateway v2 (HTTP API)
      # - httpApi:
      #     method: GET
      #     path: /api/privateRoute
      #     authorizer:
      #       name: userAuthorization
      - httpApi: "*"
      # Using Amazon Aws Api Gateway v1 (REST API - with stage name in url)
      # - http: ANY /
      # - http: ANY /{proxy+}

#------------------------------------------ 4.Plugin --------------------------------------------#
plugins:
  - serverless-esbuild
  - serverless-lift
  - serverless-s3-sync

#------------------------------------------ 5.Package -------------------------------------------#
package:
  individually: true
  patterns:
    - ".next"
    - "node_modules"
    - "public"
    - "_next"
    - "next.config.js"
    - "next-i18next.config.js"
    - "package.json"

#------------------------------------------ 6.Custom --------------------------------------------#
custom:
  #-------------------------------#
  #     6.1.Database Info         #
  #-------------------------------#
  DBName: ${file(./serverless.${opt:stage, 'dev'}.config.json):DB_Name}
  DBUserName: ${file(./serverless.${opt:stage, 'dev'}.config.json):DB_UserName}
  DBPassword: ${file(./serverless.${opt:stage, 'dev'}.config.json):DB_Password}
  DBUrl:
    Fn::GetAtt:
      - MarketDB
      - Endpoint.Address

  #-------------------------------#
  #      6.2.Credentials Info     #
  #-------------------------------#
  AwsApiKey: ${file(./serverless.${opt:stage, 'dev'}.config.json):AMAZON_AWS_ACCESS_KEY_ID}
  AwsSecretKey: ${file(./serverless.${opt:stage, 'dev'}.config.json):AMAZON_AWS_ACCESS_KEY_SECRET}

  #-------------------------------#
  #      6.3.Sync Assets Config   #
  #-------------------------------#
  s3Sync:
    - bucketName: next-static-site-assets
      localDir: .next/static
      bucketPrefix: _next/static/

  #-------------------------------#
  #      6.4.Build Config         #
  #-------------------------------#
  esbuild:
    bundle: true
    minify: true
    exclude: "*"
    external:
      - "next"

#------------------------------------------ 5.Construct -----------------------------------------#
constructs:
  #-------------------------------#
  #        5.1.Job Handler        #
  #-------------------------------#
  jobs:
    type: queue
    worker:
      handler: queueWorker.handler
    # fifo: false
    ### The maxRetries option configures how many times each message will be retried in case of failure.
    ### maxRetries default: 3
    # maxRetries: 5
    ### Lambda will receive 5 messages at a time
    ### Batch size between 1 and 10 for FIFO queues and 10000 for standard queues.
    ### For batch size over 10, maxBatchingWindow must be set.
    ### batchSize default: 1
    # batchSize: 5
    ### SQS will wait $$ seconds (so that it can batch any messages together) before delivering to lambda
    ### maxBatchingWindow default: 0 second
    # maxBatchingWindow: 5
